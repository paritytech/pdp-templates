name: Build and Push Node Templates

on:
  workflow_dispatch: 
    inputs:
      template:
        description: 'Template to build'
        required: false
        type: choice
        options:
          - all
          - polkadot-sdk-parachain
          - openzeppelin-generic
          - openzeppelin-evm
          - frontier-evm
          - pop-standard
          - pop-assets
          - pop-contracts
          - pop-evm

env:
  CARGO_TERM_COLOR: always

permissions:
  discussions: write
  contents: write # for releases

jobs:
  determine-templates:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.set-templates.outputs.templates }}
    steps:
      - id: set-templates
        run: |
          ALL_TEMPLATES='[
            {
              "name": "polkadot-sdk-parachain",
              "repo": "https://github.com/paritytech/polkadot-sdk-parachain-template.git",
              "ref": "v0.0.4",
              "folder": "polkadot-sdk-parachain-template",
              "wasm_path": "target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm",
              "binary": "parachain-template-node",
              "rust_version": "1.85.0"
            },
            {
              "name": "openzeppelin-generic",
              "repo": "https://github.com/OpenZeppelin/polkadot-runtime-templates.git",
              "ref": "v3.0.0",
              "folder": "polkadot-runtime-templates/generic-template",
              "wasm_path": "target/release/wbuild/generic-runtime-template/generic_runtime_template.compact.compressed.wasm",
              "binary": "generic-template-node",
              "rust_version": "nightly-2024-10-17"
            },
            {
              "name": "openzeppelin-evm",
              "repo": "https://github.com/OpenZeppelin/polkadot-runtime-templates.git",
              "ref": "v3.0.0",
              "folder": "polkadot-runtime-templates/evm-template",
              "wasm_path": "target/release/wbuild/evm-runtime-template/evm_runtime_template.compact.compressed.wasm",
              "binary": "evm-template-node",
              "rust_version": "nightly-2024-06-12"
            },
            {
              "name": "frontier-evm",
              "repo": "https://github.com/polkadot-evm/frontier.git",
              "ref": "master",
              "folder": "frontier",
              "wasm_path": "target/release/wbuild/frontier-template-runtime/frontier_template_runtime.compact.compressed.wasm",
              "binary": "frontier-template-node",
              "rust_version": "1.82.0"
            },
            {
              "name": "pop-standard",
              "repo": "https://github.com/r0gue-io/base-parachain.git",
              "ref": "polkadot-stable2412",
              "folder": "base-parachain",
              "wasm_path": "target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm",
              "binary": "parachain-template-node",
              "rust_version": "1.81"
            },
            {
              "name": "pop-assets",
              "repo": "https://github.com/r0gue-io/assets-parachain.git",
              "ref": "polkadot-stable2412",
              "folder": "assets-parachain",
              "wasm_path": "target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm",
              "binary": "parachain-template-node",
              "rust_version": "1.82"
            },
            {
              "name": "pop-contracts",
              "repo": "https://github.com/r0gue-io/contracts-parachain.git",
              "ref": "polkadot-stable2409",
              "folder": "contracts-parachain",
              "wasm_path": "target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm",
              "binary": "parachain-template-node",
              "rust_version": "1.77"
            },
            {
              "name": "pop-evm",
              "repo": "https://github.com/r0gue-io/evm-parachain.git",
              "ref": "polkadot-stable2407",
              "folder": "evm-parachain",
              "wasm_path": "target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm",
              "binary": "parachain-template-node",
              "rust_version": "1.77"
            }
          ]'
          
          if [ "${{ github.event.inputs.template }}" == "all" ]; then
            echo "templates=$(echo $ALL_TEMPLATES | jq -c)" >> $GITHUB_OUTPUT
          else
            # Filter the array to only include the selected template
            FILTERED_TEMPLATE=$(echo $ALL_TEMPLATES | jq -c "[.[] | select(.name == \"${{ github.event.inputs.template }}\")]")
            echo "templates=$FILTERED_TEMPLATE" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: determine-templates
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    strategy:
      fail-fast: false
      matrix:
        # os: [parity-large, parity-macos] - disable for now
        os: [parity-large]
        template: ${{ fromJSON(needs.determine-templates.outputs.templates) }}

    steps:
    - name: Install shared dependencies (Linux)
      if: matrix.os == 'parity-large'
      run: |
        sudo apt update
        sudo apt install -y openssl pkg-config g++ git clang curl libssl-dev llvm libudev-dev libclang-dev make protobuf-compiler jq
        sudo apt install -y cmake docker

    - name: Install brew
      if: matrix.os == 'parity-macos'
      uses: Homebrew/actions/setup-homebrew@1ccc07ccd54b6048295516a3eb89b192c35057dc # master from 12.09.2024

    - name: Install shared dependencies (macOS)
      if: matrix.os == 'parity-macos'
      run: |
        xcode-select --install || true
        brew install openssl pkg-config git curl llvm protobuf jq cmake

    - name: Clone template repository
      id: template
      run: |
        git clone ${{ matrix.template.repo }}
        cd ${{ matrix.template.folder }}
        git checkout ${{ matrix.template.ref }}
        
        COMMIT_HASH=$(git rev-parse --short=8 HEAD)
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.template.rust_version }}
        target: wasm32-unknown-unknown
        override: true
        components: rustfmt, clippy, rust-src

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ${{ matrix.template.folder }}/target/release/
        key: ${{ runner.os }}-rust-${{ matrix.template.name }}-${{ matrix.template.rust_version }}-${{ steps.template.outputs.commit_hash }}
        restore-keys: |
          ${{ runner.os }}-rust-${{ matrix.template.name }}-${{ matrix.template.rust_version }}-
          ${{ runner.os }}-rust-${{ matrix.template.name }}-

    - name: Cache Debug Info
      run: |
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        echo "Cache key: ${{ steps.cache.outputs.cache-primary-key }}"
        echo "Cache result: ${{ steps.cache.outputs.cache-matched-key }}"

    - name: Check environment
      run: |
        rustc --version
        cargo --version
        df -h

    # Add this step after the "Check environment" step
    - name: Set lowercase OS name
      run: echo "LOWERCASE_OS=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build
      run: |
        cd ${{ matrix.template.folder }}
        echo "Current directory: $(pwd)"
        case "${{ matrix.template.folder }}" in 
          "frontier-evm")
            echo "Building without metadata-hash feature"
            cargo build --release --locked
            ;;
          *)
            echo "Building metadata-hash feature"
            cargo build --release --locked --features metadata-hash
            ;;
        esac
        echo "Build completed."

    - name: Post-build Cache Debug Info
      run: |
        echo "Post-build Cargo home contents:"
        ls -R ~/.cargo || true
        echo "Post-build Target folder contents:"
        ls -R ${{ matrix.template.folder }}/target || true

    - name: Copy output files
      run: |
        mkdir -p output
        
        echo "Attempting to copy WASM file from: ${{ matrix.template.wasm_path }}"
        cp ${{ matrix.template.folder }}/${{ matrix.template.wasm_path }} output/${{ matrix.template.name }}.wasm || echo "Failed to copy WASM file"
        cp ${{ matrix.template.folder }}/${{ matrix.template.wasm_path }} output/polkadot-parachain.wasm || echo "Failed to copy WASM file"

        # for the omninode-only templates there's no binary to copy
        if [ "${{ matrix.template.binary }}" != "null" ]; then
          echo "Attempting to copy binary from: target/release/${{ matrix.template.binary }}"
          cp ${{ matrix.template.folder }}/target/release/${{ matrix.template.binary }} output/${{ matrix.template.name }} || echo "Failed to copy binary"
          cp ${{ matrix.template.folder }}/target/release/${{ matrix.template.binary }} output/polkadot-parachain || echo "Failed to copy binary"
        else
          echo "No binary to copy, skipping"
        fi

        # create temporary Dockerfile
        # cat <<EOF > Dockerfile
        # FROM docker.io/paritytech/ci-unified:latest as builder

        # WORKDIR /polkadot
        # COPY . /polkadot

        # RUN cargo fetch
        # RUN cargo build --locked --release

        # FROM docker.io/parity/base-bin:latest

        # COPY --from=builder /polkadot/target/release/${{ matrix.template.binary }} /usr/local/bin/polkadot-parachain
        # COPY --from=builder /polkadot/${{ matrix.template.wasm_path }} /usr/local/bin/polkadot-parachain.wasm

        # USER root
        # RUN useradd -m -u 1001 -U -s /bin/sh -d /polkadot polkadot && \
        #   mkdir -p /data /polkadot/.local/share && \
        #   chown -R polkadot:polkadot /data && \
        #   ln -s /data /polkadot/.local/share/polkadot && \
        # # unclutter and minimize the attack surface
        #   rm -rf /usr/bin /usr/sbin && \
        # # check if executable works in this container
        #   /usr/local/bin/polkadot-parachain --version

        # USER polkadot

        # EXPOSE 30333 9933 9944 9615
        # VOLUME ["/data"]

        # ENTRYPOINT ["/usr/local/bin/polkadot-parachain"]
        # EOF


        # echo "Output directory contents:"
        # ls -R output

    # - name: Set up Docker Buildx
    #   if: ${{ matrix.template.binary != null }}
    #   uses: docker/setup-buildx-action@v3

    # - name: Login to DockerHub
    #   if: ${{ matrix.template.binary != null }}
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ env.DOCKERHUB_USERNAME }}
    #     password: ${{ env.DOCKERHUB_TOKEN }}
    # - name: Build and push Docker image
    #   if: ${{ matrix.template.binary != null }}
    #   uses: docker/build-push-action@v5
    #   continue-on-error: true
    #   with:
    #     context: .
    #     dockerfile: Dockerfile
    #     push: true
    #     tags: ${{ env.DOCKERHUB_USERNAME }}/pdp-template:${{ matrix.name }}-${{ github.ref }},${{ env.DOCKERHUB_USERNAME }}/pdp-template:${{ matrix.name }}-latest
    # TODO: Create issue with listed repositories to push it to paritytech org

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.template.name }}-${{ env.LOWERCASE_OS }}-artifacts
        path: output/
        retention-days: 5

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.template.name }}-${{ matrix.template.ref }}-${{ steps.template.outputs.commit_hash }}-${{ env.LOWERCASE_OS }}
        name: ${{ matrix.template.name }}-${{ matrix.template.ref }}-${{ steps.template.outputs.commit_hash }}-${{ env.LOWERCASE_OS }}
        draft: false
        prerelease: false
        files: |
          ./output/${{ matrix.template.name }}.wasm
          ./output/${{ matrix.template.name }}
          ./output/polkadot-parachain
          ./output/polkadot-parachain.wasm
