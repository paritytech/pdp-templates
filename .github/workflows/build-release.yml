name: Build and Push Node Templates

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  discussions: write
  contents: write # for releases

jobs:
  build-and-push:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    strategy:
      fail-fast: false
      matrix:
        os: [parity-large, parity-macos]
        template:
          - name: polkadot-sdk-parachain
            repo: https://github.com/paritytech/polkadot-sdk-parachain-template.git
            ref: master
            folder: polkadot-sdk-parachain-template
            wasm_path: target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
            binary_path: target/release/parachain-template-node
            rust_version: nightly-2024-09-11
            omni_node_support: true
          - name: frontier
            repo: https://github.com/polkadot-evm/frontier.git
            ref: master
            folder: frontier
            wasm_path: target/release/wbuild/frontier-template-runtime/frontier_template_runtime.compact.compressed.wasm
            binary_path: target/release/frontier-template-node
            rust_version: nightly-2024-02-05
            omni_node_support: false
          - name: openzeppelin-generic
            repo: https://github.com/OpenZeppelin/polkadot-runtime-templates.git
            ref: v2.0.1
            folder: polkadot-runtime-templates/generic-template
            wasm_path: target/release/wbuild/generic-runtime-template/generic_runtime_template.compact.compressed.wasm
            binary_path: target/release/generic-template-node
            rust_version: nightly-2024-06-12
            omni_node_support: false
          - name: openzeppelin-evm
            repo: https://github.com/OpenZeppelin/polkadot-runtime-templates.git
            ref: v2.0.1
            folder: polkadot-runtime-templates/evm-template
            wasm_path: target/release/wbuild/evm-runtime-template/evm_runtime_template.compact.compressed.wasm
            binary_path: target/release/evm-template-node
            rust_version: nightly-2024-06-12
            omni_node_support: false
          - name: pop-standard
            repo: https://github.com/r0gue-io/base-parachain.git
            ref: polkadot-stable2412
            folder: base-parachain
            wasm_path: target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
            binary_path: target/release/parachain-template-node
            rust_version: nightly-2024-09-04
            omni_node_support: false
          - name: pop-assets
            repo: https://github.com/r0gue-io/assets-parachain.git
            ref: polkadot-stable2412
            folder: assets-parachain
            wasm_path: target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
            binary_path: target/release/parachain-template-node
            rust_version: nightly-2024-10-15
            omni_node_support: false
          - name: pop-contracts
            repo: https://github.com/r0gue-io/contracts-parachain.git 
            ref: polkadot-stable2409
            folder: contracts-parachain
            wasm_path: target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
            binary_path: target/release/parachain-template-node
            rust_version: nightly-2024-09-04
            omni_node_support: false
          - name: pop-evm
            repo: https://github.com/r0gue-io/evm-parachain.git
            ref: polkadot-stable2407
            folder: evm-parachain
            wasm_path: target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
            binary_path: target/release/parachain-template-node
            rust_version: nightly-2024-04-09
            omni_node_support: false

    steps:
    - name: Install shared dependencies (Linux)
      if: matrix.os == 'parity-large'
      run: |
        sudo apt update
        sudo apt install -y openssl pkg-config g++ git clang curl libssl-dev llvm libudev-dev libclang-dev make protobuf-compiler jq
        sudo apt install -y cmake docker

    - name: Install brew
      if: matrix.os == 'parity-macos'
      uses: Homebrew/actions/setup-homebrew@1ccc07ccd54b6048295516a3eb89b192c35057dc # master from 12.09.2024

    - name: Install shared dependencies (macOS)
      if: matrix.os == 'parity-macos'
      run: |
        xcode-select --install || true
        brew install openssl pkg-config git curl llvm protobuf jq cmake

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3

    # - name: Login to DockerHub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ env.DOCKERHUB_USERNAME }}
    #     password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Clone template repository
      id: template
      run: |
        git clone ${{ matrix.template.repo }}
        cd ${{ matrix.template.folder }}
        git checkout ${{ matrix.template.ref }}
        
        COMMIT_HASH=$(git rev-parse --short=8 HEAD)
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.template.rust_version }}
        target: wasm32-unknown-unknown
        override: true
        components: rustfmt, clippy, rust-src

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ${{ matrix.template.folder }}/target/release/
        key: ${{ runner.os }}-rust-${{ matrix.template.name }}-${{ matrix.template.rust_version }}-${{ steps.template.outputs.commit_hash }}
        restore-keys: |
          ${{ runner.os }}-rust-${{ matrix.template.name }}-${{ matrix.template.rust_version }}-
          ${{ runner.os }}-rust-${{ matrix.template.name }}-

    - name: Cache Debug Info
      run: |
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        echo "Cache key: ${{ steps.cache.outputs.cache-primary-key }}"
        echo "Cache result: ${{ steps.cache.outputs.cache-matched-key }}"

    - name: Check environment
      run: |
        rustc --version
        cargo --version
        df -h

    # Add this step after the "Check environment" step
    - name: Set lowercase OS name
      run: echo "LOWERCASE_OS=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build node
      run: |
        cd ${{ matrix.template.folder }}
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        cargo build --release
        echo "Build completed."

    - name: Post-build Cache Debug Info
      run: |
        echo "Post-build Cargo home contents:"
        ls -R ~/.cargo || true
        echo "Post-build Target folder contents:"
        ls -R ${{ matrix.template.folder }}/target || true

    - name: Copy output files
      run: |
        mkdir -p output
        echo "Attempting to copy WASM file from: ${{ matrix.template.wasm_path }}"
        cp ${{ matrix.template.folder }}/${{ matrix.template.wasm_path }} output/${{ matrix.template.name }}.wasm || echo "Failed to copy WASM file"
        echo "Attempting to copy binary from: ${{ matrix.template.binary_path }}"
        cp ${{ matrix.template.folder }}/${{ matrix.template.binary_path }} output/${{ matrix.template.name }} || echo "Failed to copy binary"
        echo "Output directory contents:"
        ls -R output

    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: ./Dockerfile
    #     push: true
    #     tags: ${{ env.DOCKERHUB_USERNAME }}/pdp:${{ matrix.name }}-${{ github.ref }},${{ env.DOCKERHUB_USERNAME }}/pdp:${{ matrix.name }}-latest

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.template.name }}-${{ env.LOWERCASE_OS }}-artifacts
        path: output/
        retention-days: 5

    - name: Create Release and Upload Assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ matrix.template.name }}-${{ matrix.template.ref }}-${{ steps.template.outputs.commit_hash }}-${{ env.LOWERCASE_OS }}
        name: ${{ matrix.template.name }}-${{ matrix.template.ref }}-${{ steps.template.outputs.commit_hash }}-${{ env.LOWERCASE_OS }}
        draft: false
        prerelease: false
        files: |
          ./output/${{ matrix.template.name }}.wasm
          ./output/${{ matrix.template.name }}
